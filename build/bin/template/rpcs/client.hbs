import * as grpc from 'grpc';
import {{curlyLeft}}GatewayContext, RpcContext{{curlyRight}} from "sasdn";

import {
    {{#each this.services}}
    {{@key}}Service,
    {{/each}}
} from "{{{this.protoImportPath}}}";

export default class {{{this.className}}} {
    public client: {{{this.clientName}}};

    constructor(ctx?: GatewayContext | RpcContext) {
        const options = ConfigHelper.instance().getOption();

        this.client = GrpcInstrumentation.proxyClient(
            new {{{this.clientName}}}(`${options.host}:${options.port}`, grpc.credentials.createInsecure()),
            ctx,
            TracerHelper.instance().getTraceInfo(true, '{{{this.protoName}}}')
        );
    }

    {{#each this.services}}
    public {{{this.methodName}}}(request: {{{this.requestTypeStr}}}): Promise<{{{this.responseTypeStr}}}> {
        return new Promise((resolve, reject) => {
            this.client.{{{this.methodName}}}(request, (err, res: {{{this.responseTypeStr}}}) => {
                if (err) {
                    return reject(err);
                }
                return resolve(res);
            });
        });
    }
    {{/each}}
}