
{{!-- message --}}
{{{indent}}}export class {{{message.messageName}}} extends jspb.Message { {{!-- type class start --}}
{{#each message.fields}} {{!-- fields start --}}
    {{#if this.isMapField}} {{!-- map spec start --}}
{{{indent}}}    get{{{this.camelUpperName}}}Map(): jspb.Map<{{{this.mapFieldInfo.keyTypeName}}}, {{{this.mapFieldInfo.valueTypeName}}}>;
{{{indent}}}    clear{{{this.camelUpperName}}}Map(): void;
    {{/if}} {{!-- map spec end --}}
    {{#if this.hasFieldPresence}} {{!-- hasFieldPresence start --}}
{{{indent}}}    has{{{this.camelUpperName}}}(): boolean;
        {{#if not this.hasClearMethodCreated}}
{{{indent}}}    {{printClearIfNotPresent this}}
        {{/if}}
    {{/if}} {{!-- hasFieldPresence end --}}
    {{#if this.isRepeatField}} {{!-- repeat start --}}
        {{#if not this.hasClearMethodCreated}}
{{{indent}}}    {{printClearIfNotPresent this}}
        {{/if}}
        {{#is this.type BYTES_TYPE}}
{{{indent}}}    get{{{this.camelUpperName}}}List(): Array<Uint8Array | string>;
{{{indent}}}    get{{{this.camelUpperName}}}List_asU8(): Array<Uint8Array>;
{{{indent}}}    get{{{this.camelUpperName}}}List_asB64(): Array<string>;
{{{indent}}}    set{{{this.camelUpperName}}}List(value: Array<Uint8Array | string>): void;
{{{indent}}}    {{printRepeatedAddMethod this "Uint8Array | string"}}
        {{else}}
{{{indent}}}    get{{{this.camelUpperName}}}List(): Array<${exportType}>;
{{{indent}}}    set{{{this.camelUpperName}}}List(value: Array<${exportType}>): void;
{{{indent}}}    {{printRepeatedAddMethod this this.exportType}}
        {{/is}}
    {{else}} {{!-- repeat else --}}
        {{#is this.type BYTES_TYPE}}
{{{indent}}}    get{{{this.camelUpperName}}}(): Uint8Array | string;
{{{indent}}}    get{{{this.camelUpperName}}}_asU8(): Uint8Array;
{{{indent}}}    get{{{this.camelUpperName}}}_asB64(): string;
{{{indent}}}    set{{{this.camelUpperName}}}(value: Uint8Array | string): void;
        {{else}}
{{{indent}}}    get{{{this.camelUpperName}}}(): {{{this.exportType}}}{{#if this.canBeUndefined}} | undefined{{/if}};
{{{indent}}}    set{{{this.camelUpperName}}}(value{{#is this.type MESSAGE_TYPE}}?{{/is}}: {{{this.exportType}}}): void;
        {{/is}}
    {{/if}} {{!-- repeat end --}}

{{/each}} {{!-- fields end --}}
{{#each message.oneofDeclList}} {{!-- oneofDeclList start --}}
{{{indent}}}    get{{oneOfName this}}Case(): {{{message.messageName}}}.{{oneOfName this}}Case;
{{/each}} {{!-- oneofDeclList end --}}

{{{indent}}}    serializeBinary(): Uint8Array;
{{{indent}}}    toObject(includeInstance?: boolean): {{{message.messageName}}}.{{{objectTypeName}}};
{{{indent}}}    static toObject(includeInstance: boolean, msg: {{{message.messageName}}}): {{{message.messageName}}}.{{{objectTypeName}}};
{{{indent}}}    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
{{{indent}}}    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
{{{indent}}}    static serializeBinaryToWriter(message: {{{message.messageName}}}, writer: jspb.BinaryWriter): void;
{{{indent}}}    static deserializeBinary(bytes: Uint8Array): {{{message.messageName}}};
{{{indent}}}    static deserializeBinaryFromReader(message: {{{message.messageName}}}, reader: jspb.BinaryReader): {{{message.messageName}}};
{{{indent}}}\} {{!-- type class end --}}

{{!-- namespace --}}
{{{indent}}}export namespace {{{message.messageName}}} {
{{{indent}}}    export type {{{objectTypeName}}} = {
{{#each message.fields}} {{!-- fields start --}}
    {{#is this.type MESSAGE_TYPE}}
        {{#if this.isMapField}}
{{{indent}}}        {{{this.camelCaseName}}}Map: Array<[{{{this.mapFieldInfo.keyTypeName}}}{{#is this.mapFieldInfo.keyType MESSAGE_TYPE}}.AsObject{{/is}}, {{{this.mapFieldInfo.valueTypeName}}}{{#is this.mapFieldInfo.valueType MESSAGE_TYPE}}.AsObject{{/is}}]>,
        {{/if}}
    {{/is}}
    {{#if this.isRepeatField}} {{!-- repeat start --}}
        {{#is this.type BYTES_TYPE}}
{{{indent}}}        {{{this.camelCaseName}}}List: Array<Uint8Array | string>,
        {{else}}
{{{indent}}}        {{{this.camelCaseName}}}List: Array<{{{this.exportType}}}{{#is this.type MESSAGE_TYPE}}.AsObject{{/is}}>,
        {{/is}}
    {{else}} {{!-- repeat else --}}
        {{#is this.type BYTES_TYPE}}
{{{indent}}}        {{{this.camelCaseName}}}: Uint8Array | string,
        {{else}}
            {{{this.camelCaseName}}}{{#if this.canBeUndefined}}?{{/if}}: {{{fieldObjectType}}},
        {{/is}}
    {{/if}} {{!-- repeat end --}}
{{/each}} {{!-- fields end --}}
{{{indent}}}    }

{{#each message.nestedTypes}}
{{{indent}}}{{{this}}}
{{/each}}

{{#each message.formattedEnumListStr}}
{{{indent}}}{{{this}}}
{{/each}}

{{#each message.formattedOneofListStr}}
{{{indent}}}{{{this}}}
{{/each}}

{{#each message.formattedExtListStr}}
{{{indent}}}{{{this}}}
{{/each}}

{{{indent}}}\}